name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install -r requirements.txt
        # Install optional dependencies for testing
        pip install pytest pytest-cov pytest-xdist
        pip install black flake8 isort mypy
        # Install optional ML dependencies if available
        pip install scikit-optimize hyperopt || echo "Optional dependencies not available"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 automl/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 automl/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff automl/ tests/ examples/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff automl/ tests/ examples/

    - name: Type checking with mypy (optional, continue on error)
      continue-on-error: true
      run: |
        mypy automl/ --ignore-missing-imports --no-strict-optional

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=automl --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test examples
      run: |
        cd examples/
        python basic_usage.py || echo "Basic usage example failed"
        # Test importing the main run_automl function
        python -c "from run_automl import run_automl; print('run_automl imported successfully')"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install black flake8 isort mypy bandit safety

    - name: Security check with bandit
      run: |
        bandit -r automl/ -f json -o bandit-report.json || true
        bandit -r automl/ || echo "Security issues found, check bandit-report.json"

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Security vulnerabilities found, check safety-report.json"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Package
    needs: [test, code-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  test-package:
    name: Test Package Installation
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl

    - name: Test package import
      run: |
        python -c "import automl; print(f'AutoML version: {automl.__version__}')"
        python -c "from automl import AutoML, DataUtils; print('Core imports successful')"

    - name: Test basic functionality
      run: |
        python -c "
        from automl import AutoML
        from sklearn.datasets import make_classification
        import pandas as pd
        
        # Create test data
        X, y = make_classification(n_samples=100, n_features=5, random_state=42)
        X = pd.DataFrame(X)
        y = pd.Series(y)
        
        # Test AutoML
        automl = AutoML({'problem_type': 'classification'})
        print('AutoML basic functionality test passed')
        "

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # Create basic sphinx docs if docs/conf.py exists
        if [ -f docs/conf.py ]; then
          cd docs/
          make html
        else
          echo "No sphinx documentation found, skipping"
        fi

  deploy-test-pypi:
    name: Deploy to Test PyPI
    needs: [test, build, test-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: test-pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  deploy-pypi:
    name: Deploy to PyPI
    needs: [test, build, test-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [deploy-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest-benchmark

    - name: Run benchmarks
      run: |
        # Run benchmark tests if they exist
        if [ -d "tests/benchmarks" ]; then
          pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark.json
        else
          echo "No benchmark tests found"
        fi

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json